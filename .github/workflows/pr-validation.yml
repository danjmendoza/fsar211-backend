name: PR Validation

on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main
    paths:
      - '**'  # Any changes in the backend repository

permissions:
  contents: read
  pull-requests: write  # Needed to comment on PRs

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --no-cache-dir --upgrade pip
        pip install --no-cache-dir -r requirements.txt
        pip install --no-cache-dir -r requirements-dev.txt

    - name: Run linting
      id: lint
      run: |
        echo "Running Ruff linter..."
        LINT_OUTPUT=$(ruff check . --format=github || true)
        echo "LINT_RESULT<<EOF" >> $GITHUB_ENV
        echo "$LINT_OUTPUT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Run tests
      id: test
      run: |
        echo "Running pytest..."
        mkdir -p test-results
        TEST_OUTPUT=$(pytest -v --junitxml=test-results/junit.xml || true)
        echo "TEST_RESULT<<EOF" >> $GITHUB_ENV
        echo "$TEST_OUTPUT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Get timestamp
      id: timestamp
      run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

    - name: Build Docker image
      id: build
      uses: docker/build-push-action@v4
      with:
        context: .
        load: true  # Load the image locally for testing
        push: false  # Don't push to registry, just build to verify
        tags: wagoneerguy/fsar211-backend:pr-${{ github.event.pull_request.number }}
        cache-from: type=registry,ref=wagoneerguy/fsar211-backend:latest
        cache-to: type=inline

    - name: Run Tests
      id: pytest
      env:
        PYTHONPATH: ${{ github.workspace }}
        PG_USER: test
        PG_PASSWORD: test
        PG_DB: test
        PG_HOST: localhost
        PG_PORT: 5432
        SQLALCHEMY_DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/test
        SQLALCHEMY_ECHO: "false"
      run: |
        # Start PostgreSQL
        docker run -d \
          --name test-db \
          -e POSTGRES_USER=test \
          -e POSTGRES_PASSWORD=test \
          -e POSTGRES_DB=test \
          postgres:14-alpine

        # Wait for PostgreSQL to be ready
        sleep 5

        # Set up Python environment
        python -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

        # Run tests and capture output
        export PG_USER=test
        export PG_PASSWORD=test
        export PG_DB=test
        export PG_HOST=localhost
        export PG_PORT=5432
        export SQLALCHEMY_DATABASE_URL=postgresql+asyncpg://test:test@localhost:5432/test
        export SQLALCHEMY_ECHO=false
        pytest_output=$(pytest -v 2>&1)
        echo "test_output=$pytest_output" >> $GITHUB_OUTPUT

    - name: Calculate build time
      id: build_time
      run: |
        end_time=$(date +%s)
        start_time=${{ steps.timestamp.outputs.start_time }}
        build_duration=$((end_time - start_time))
        echo "duration=$build_duration" >> $GITHUB_OUTPUT
        echo "duration_formatted=$(date -u -d @${build_duration} +%M:%S)" >> $GITHUB_OUTPUT

    - name: Comment PR
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const status = '${{ job.status }}'.toLowerCase();
          const emoji = status === 'success' ? '✅' : status === 'failure' ? '❌' : '⚠️';
          const testOutput = `${{ steps.pytest.outputs.test_output }}`;
          const lintOutput = `${{ env.LINT_RESULT }}`;
          const buildTime = '${{ steps.build_time.outputs.duration_formatted }}';
          const prNumber = '${{ github.event.pull_request.number }}';
          
          const message = [
            `## Validation Results ${emoji}`,
            '',
            '### Linting',
            '```',
            lintOutput,
            '```',
            '',
            '### Tests',
            '```',
            testOutput,
            '```',
            '',
            '### Docker Build',
            `- 🕒 Build time: ${buildTime}`,
            `- 📦 Image: \`wagoneerguy/fsar211-backend:pr-${prNumber}\``,
            '',
            status === 'success' 
              ? '✨ All checks passed! Ready for review.' 
              : '⚠️ Tests or linting failed. Please fix the issues above before merging.'
          ].join('\n');

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });

    - name: Notify Slack
      if: always()
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        if [ -n "$SLACK_WEBHOOK" ]; then
          # Prepare status emoji
          if [ "${{ job.status }}" == "success" ]; then
            STATUS_EMOJI=":white_check_mark:"
          elif [ "${{ job.status }}" == "failure" ]; then
            STATUS_EMOJI=":x:"
          else
            STATUS_EMOJI=":warning:"
          fi

          # Send notification
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"${STATUS_EMOJI} *PR Validation Results*\n>*PR:* #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}\n>*Status:* ${{ job.status }}\n>*Build Time:* ${{ steps.build_time.outputs.duration_formatted }}\n>*Author:* ${{ github.event.pull_request.user.login }}\n\"
                  }
                }
              ]
            }" \
            $SLACK_WEBHOOK
        fi
