name: PR Validation

on:
  pull_request:
    types:
      - opened
      - synchronize
      - closed
    branches:
      - main
    paths:
      - '**'  # Any changes in the backend repository

permissions:
  contents: read
  pull-requests: write  # Needed to comment on PRs

jobs:
  # Delete branch after merge
  cleanup:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Delete branch
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = context.payload.pull_request.head.ref
            const owner = context.repo.owner
            const repo = context.repo.repo
            await github.rest.git.deleteRef({
              owner,
              repo,
              ref: `heads/${branch}`
            })

  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --no-cache-dir --upgrade pip 2>&1 | grep -v "DEPRECATION\|WARNING\|NOTICE"
        pip install --no-cache-dir -r requirements.txt 2>&1 | grep -v "DEPRECATION\|WARNING\|NOTICE"
        pip install --no-cache-dir -r requirements-dev.txt 2>&1 | grep -v "DEPRECATION\|WARNING\|NOTICE"

    - name: Run linting
      id: lint
      run: |
        echo "Running Ruff linter..."
        LINT_OUTPUT=$(ruff check . --format=github || true)
        echo "LINT_RESULT<<EOF" >> $GITHUB_ENV
        echo "$LINT_OUTPUT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create test network
      run: docker network create test-network

    - name: Run tests
      id: test
      run: |
        # Start PostgreSQL
        docker run -d \
          --name test-db \
          --network test-network \
          -e POSTGRES_USER=test \
          -e POSTGRES_PASSWORD=test \
          -e POSTGRES_DB=test \
          postgres:14-alpine

        # Wait for PostgreSQL to be ready
        echo "Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if docker exec test-db pg_isready -U test > /dev/null 2>&1; then
            echo "PostgreSQL is ready!"
            # Wait a bit more for full initialization
            sleep 5
            break
          fi
          echo "Waiting..."
          sleep 1
        done

        # Initialize database schema
        docker exec test-db psql -U test -d test -c 'CREATE EXTENSION IF NOT EXISTS "uuid-ossp";'

        # Run tests in Docker with error handling
        echo "Running tests..."
        if ! docker run \
          --rm \
          --network test-network \
          -v ${PWD}:/workspace \
          -w /workspace \
          -e PG_HOST=test-db \
          -e PG_PORT=5432 \
          -e PG_USER=test \
          -e PG_PASSWORD=test \
          -e PG_DB=test \
          -e PYTHONPATH=/workspace/app:/workspace/tests \
          python:3.11 \
          /bin/bash -c "\
            python -m venv /venv && \
            . /venv/bin/activate && \
            pip install --no-cache-dir --upgrade pip && \
            pip install --no-cache-dir -r requirements.txt -r requirements-dev.txt && \
            mkdir -p test-results && \
            pytest -v --junitxml=test-results/junit.xml\
          " 2>&1 | tee test_output.txt; then
          echo "Tests failed. See output above."
          exit 1
        fi

        echo "TEST_RESULT<<EOF" >> $GITHUB_ENV
        cat test_output.txt >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Check test results
      if: always()
      run: |
        if grep -q "=== FAILURES ===\|=== ERRORS ===" test_output.txt; then
          echo "Tests failed. See output above."
          exit 1
        fi

    - name: Cleanup Docker resources
      if: always()
      run: |
        docker stop test-db || true
        docker rm test-db || true
        docker network rm test-network || true
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Get timestamp
      id: timestamp
      run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

    - name: Build Docker image
      id: build
      if: success()
      uses: docker/build-push-action@v4
      with:
        context: .
        load: true  # Load the image locally for testing
        push: false  # Don't push to registry, just build to verify
        tags: wagoneerguy/fsar211-backend:pr-${{ github.event.pull_request.number }}
        cache-from: type=registry,ref=wagoneerguy/fsar211-backend:latest
        cache-to: type=inline

    - name: Calculate build time
      id: build_time
      run: |
        end_time=$(date +%s)
        start_time=${{ steps.timestamp.outputs.start_time }}
        build_duration=$((end_time - start_time))
        echo "duration=$build_duration" >> $GITHUB_OUTPUT
        echo "duration_formatted=$(date -u -d @${build_duration} +%M:%S)" >> $GITHUB_OUTPUT
