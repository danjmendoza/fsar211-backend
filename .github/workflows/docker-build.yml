name: Deploy to Production

on:
  pull_request:
    types:
      - closed  # Only trigger when PR is merged or closed
    branches:
      - main
    paths:
      - '**'  # Any changes in the backend repository

permissions:
  deployments: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Check if PR was merged
      if: github.event.pull_request.merged == true
      run: echo "PR was merged"

    - name: Extract PR number
      if: github.event.pull_request.merged == true
      shell: bash
      run: echo "PR_NUMBER=$(echo ${{ github.event.pull_request.number }})" >> $GITHUB_ENV

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          wagoneerguy/fsar211-backend:latest
          wagoneerguy/fsar211-backend:pr-${{ env.PR_NUMBER }}-${{ github.sha }}
        cache-from: type=registry,ref=wagoneerguy/fsar211-backend:latest
        cache-to: type=inline

    - name: Create deployment status
      if: github.event.pull_request.merged == true
      uses: bobheadxi/deployments@v1
      id: deployment
      with:
        step: start
        token: ${{ secrets.GITHUB_TOKEN }}
        env: production
        ref: ${{ github.head_ref }}
        desc: 'Deploy to production'

    - name: Setup SSH and test connection
      if: github.event.pull_request.merged == true
      env:
        SSH_PRIVATE_KEY: ${{ secrets.PROD_SSH_KEY }}
        DEPLOY_HOST: ${{ secrets.PROD_HOST }}
        DEPLOY_USER: ${{ secrets.PROD_SSH_USER }}
      run: |
        # Setup SSH key
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        echo "$DEPLOY_HOST ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIL/wfulejt1Rju8XK61dNS0D/OF/EYBPAibHA25O6/cp" > ~/.ssh/known_hosts

        # Test SSH connection
        if ! ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=accept-new $DEPLOY_USER@$DEPLOY_HOST 'echo "SSH Connection Successful"'; then
          echo "::error::Failed to establish SSH connection"
          exit 1
        fi

    - name: Deploy to production
      if: github.event.pull_request.merged == true
      env:
        SSH_PRIVATE_KEY: ${{ secrets.PROD_SSH_KEY }}
        DEPLOY_HOST: ${{ secrets.PROD_HOST }}
        DEPLOY_USER: ${{ secrets.PROD_SSH_USER }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: |
        # Function to handle errors
        handle_error() {
          error_message="$1"
          echo "::error::$error_message"
          exit 1
        }

        # Deploy with error handling
        # Create environment variables file on the server
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=accept-new $DEPLOY_USER@$DEPLOY_HOST << 'ENDSSH' || handle_error "Failed to create environment file"
          # Create environment file with restricted permissions
          sudo touch /tmp/backend.env
          sudo chown $USER:$USER /tmp/backend.env
          chmod 600 /tmp/backend.env
          
          # Write environment variables
          cat > /tmp/backend.env << EOF
          DATABASE_URL=${DATABASE_URL}
          SECRET_KEY=${SECRET_KEY}
          ENVIRONMENT=production
          CORS_ORIGINS=https://211.fremontsar.com
          EOF
        ENDSSH

        # Continue with deployment
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=accept-new $DEPLOY_USER@$DEPLOY_HOST << 'ENDSSH' || handle_error "Deployment failed"
          set -e  # Exit on any error

          echo "Pulling new image..."
          docker pull wagoneerguy/fsar211-backend:latest || exit 1

          echo "Stopping old container..."
          docker stop fsar211-backend 2>/dev/null || true
          docker rm fsar211-backend 2>/dev/null || true

          echo "Starting new container..."
          docker run -d --name fsar211-backend \
            --network fsar211-network \
            -p 8000:8000 \
            --env-file /tmp/backend.env \
            wagoneerguy/fsar211-backend:latest || exit 1

          echo "Running migrations..."
          if ! docker exec fsar211-backend alembic upgrade head; then
            echo "Migration failed, rolling back..."
            docker stop fsar211-backend
            docker rm fsar211-backend
            exit 1
          fi

          # Verify service is running
          echo "Verifying service..."
          sleep 5
          if ! curl -s http://localhost:8000 > /dev/null; then
            echo "Service verification failed"
            exit 1
          fi
        ENDSSH

        notify_slack ":white_check_mark: Successfully deployed fsar211-backend!"

    - name: Update deployment status
      if: always() && github.event.pull_request.merged == true # Only update status when merged to main
      uses: bobheadxi/deployments@v1
      with:
        step: finish
        token: ${{ secrets.GITHUB_TOKEN }}
        status: ${{ job.status }}
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
        env: production
        env_url: https://211.fremontsar.com
        ref: ${{ github.head_ref }}
        desc: 'Production deployment complete'
